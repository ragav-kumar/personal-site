{"version":3,"file":"static/js/main.chunk.js","sources":["webpack:///D:/xampp/htdocs/personal/web/app/themes/rkain-theme/react-src/src/index.css?e49a","D:/xampp/htdocs/personal/web/app/themes/rkain-theme/react-src/src/App.js","D:/xampp/htdocs/personal/web/app/themes/rkain-theme/react-src/src/PageWrap.js","webpack:///D:/xampp/htdocs/personal/web/app/themes/rkain-theme/react-src/src/index.css?3b31","D:/xampp/htdocs/personal/web/app/themes/rkain-theme/react-src/src/index.js","D:/xampp/htdocs/personal/web/app/themes/rkain-theme/react-src/src/serviceWorker.js"],"sourcesContent":["// extracted by mini-css-extract-plugin","import React from 'react';\nimport styled, {createGlobalStyle} from 'styled-components';\n\nimport PageWrap from './PageWrap'\n\nconst GlobalStyle = createGlobalStyle`\n\t* {\n\t\tbox-sizing: border-box;\n\t}\n\tbody {\n\t\theight: 100vh;\n\t\twidth: 100vw;\n\t\tposition: relative;\n\t}\n`\n\n\nconst Sidebar = styled.div``\nconst Mugshot = styled.div``\nconst MenuArea = styled.div``\nconst ContentArea = styled.div``\n\nfunction App() {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<GlobalStyle />\n\t\t\t<PageWrap>\n\t\t\t\t<Sidebar>\n\t\t\t\t\t<Mugshot>TODO</Mugshot>\n\t\t\t\t\t<MenuArea>TODO</MenuArea>\n\t\t\t\t</Sidebar>\n\t\t\t\t<ContentArea>\n\t\t\t\t\tTODO\n\t\t\t\t</ContentArea>\n\t\t\t</PageWrap>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default App;\n","import React from 'react'\r\nimport styled, {css} from \"styled-components\";\r\n\r\nconst border = {\r\n\tweight: \"15px\",\r\n\tcolor: \"rgba(0,0,255,0.5)\",\r\n\t\r\n}\r\n\r\n\r\nconst octagonPiece = css`\r\n\tcontent: \"\";\r\n\tposition: absolute;\r\n\tleft: -${border.weight};\r\n\tright: -${border.weight};\r\n\tborder-left: ${border.weight} solid transparent;\r\n\tborder-right: ${border.weight} solid transparent;\r\n`;\r\n\r\nconst PageWrapOuter = styled.div`\r\n\tbackground-color: ${border.color};\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n\twidth: 60%;\r\n\theight: calc(0.6 * 62vw);\r\n\tborder-left: ${border.weight} solid ${border.color};\r\n\tborder-right: ${border.weight} solid ${border.color};\r\n\t&::before {\r\n\t\t${octagonPiece}\r\n\t\tbottom: 100%;\r\n\t\tborder-bottom: ${border.weight} solid ${border.color};\r\n\t}\r\n\t&::after {\r\n\t\t${octagonPiece}\r\n\t\ttop: 100%;\r\n\t\tborder-top: ${border.weight} solid ${border.color};\r\n\t}\r\n`;\r\nconst PageWrapInner = styled.div`\r\n\tbackground-color: white;\r\n\theight: calc(100% - 30px);\r\n\twidth: calc(100% - 30px);\r\n\tmargin: ${border.weight};\r\n`;\r\n\r\nconst PageWrap = (props) => {\r\n\treturn (\r\n\t\t<PageWrapOuter>\r\n\t\t\t<PageWrapInner>\r\n\t\t\t\t{props.children}\r\n\t\t\t</PageWrapInner>\r\n\t\t</PageWrapOuter>\r\n\t)\r\n}\r\n\r\nexport default PageWrap;","var content = require(\"!!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-3-1!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-3-2!../node_modules/postcss-loader/src/index.js??postcss!./index.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AAEA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AAEA;AACA;AACA;AAFA;AAOA;AASA;AAqBA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AAKA;AACA,eA8BA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}